// Generated from Grammar.g4 by ANTLR 4.4
package project;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GrammarLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		INT=1, BOOL=2, ENUM=3, IF=4, ELSE=5, WHILE=6, RUN=7, JOIN=8, TRUE=9, FALSE=10, 
		ASS=11, EQ=12, GT=13, GE=14, LT=15, LE=16, NE=17, AND=18, OR=19, NOT=20, 
		LBRACE=21, RBRACE=22, LPAR=23, RPAR=24, LBRACK=25, RBRACK=26, SEMI=27, 
		DQUOTE=28, SQUOTE=29, COLON=30, COMMA=31, DOT=32, AMP=33, PLUS=34, MINUS=35, 
		SLASH=36, STAR=37, CARET=38, UND=39, COMMENT=40, WS=41, ID=42, NUM=43, 
		EID=44, STR=45;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'"
	};
	public static final String[] ruleNames = {
		"INT", "BOOL", "ENUM", "IF", "ELSE", "WHILE", "RUN", "JOIN", "TRUE", "FALSE", 
		"ASS", "EQ", "GT", "GE", "LT", "LE", "NE", "AND", "OR", "NOT", "LBRACE", 
		"RBRACE", "LPAR", "RPAR", "LBRACK", "RBRACK", "SEMI", "DQUOTE", "SQUOTE", 
		"COLON", "COMMA", "DOT", "AMP", "PLUS", "MINUS", "SLASH", "STAR", "CARET", 
		"UND", "COMMENT", "WS", "ID", "NUM", "EID", "STR", "LETTER", "UCASEL", 
		"LCASEL", "DIGIT", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
		"L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", 
		"Z"
	};


	public GrammarLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Grammar.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2/\u017a\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4"+
		"\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3"+
		"\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\21"+
		"\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26"+
		"\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35"+
		"\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&"+
		"\3\'\3\'\3(\3(\3)\3)\3)\3)\7)\u010e\n)\f)\16)\u0111\13)\3)\3)\3)\3)\3"+
		")\3*\6*\u0119\n*\r*\16*\u011a\3*\3*\3+\3+\3+\3+\7+\u0123\n+\f+\16+\u0126"+
		"\13+\3,\6,\u0129\n,\r,\16,\u012a\3-\3-\3-\3-\7-\u0131\n-\f-\16-\u0134"+
		"\13-\3.\3.\7.\u0138\n.\f.\16.\u013b\13.\3.\3.\3/\3/\3\60\3\60\3\61\3\61"+
		"\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\38\39"+
		"\39\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\3?\3?\3@\3@\3A\3A\3B\3B\3C\3C\3D\3D"+
		"\3E\3E\3F\3F\3G\3G\3H\3H\3I\3I\3J\3J\3K\3K\3L\3L\4\u010f\u0139\2M\3\3"+
		"\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21"+
		"!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!"+
		"A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\2_\2a\2c\2e\2g\2i\2k\2m\2o\2q\2s\2u\2"+
		"w\2y\2{\2}\2\177\2\u0081\2\u0083\2\u0085\2\u0087\2\u0089\2\u008b\2\u008d"+
		"\2\u008f\2\u0091\2\u0093\2\u0095\2\u0097\2\3\2!\5\2\13\f\17\17\"\"\4\2"+
		"C\\c|\3\2C\\\3\2c|\3\2\62;\4\2CCcc\4\2DDdd\4\2EEee\4\2FFff\4\2GGgg\4\2"+
		"HHhh\4\2IIii\4\2JJjj\4\2KKkk\4\2LLll\4\2MMmm\4\2NNnn\4\2OOoo\4\2PPpp\4"+
		"\2QQqq\4\2RRrr\4\2SSss\4\2TTtt\4\2UUuu\4\2VVvv\4\2WWww\4\2XXxx\4\2YYy"+
		"y\4\2ZZzz\4\2[[{{\4\2\\\\||\u0165\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2"+
		"\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3"+
		"\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2"+
		"\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2"+
		"\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2"+
		"\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2"+
		"\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2"+
		"O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3"+
		"\2\2\2\3\u0099\3\2\2\2\5\u009d\3\2\2\2\7\u00a2\3\2\2\2\t\u00a7\3\2\2\2"+
		"\13\u00aa\3\2\2\2\r\u00af\3\2\2\2\17\u00b5\3\2\2\2\21\u00b9\3\2\2\2\23"+
		"\u00be\3\2\2\2\25\u00c3\3\2\2\2\27\u00c9\3\2\2\2\31\u00cb\3\2\2\2\33\u00ce"+
		"\3\2\2\2\35\u00d0\3\2\2\2\37\u00d3\3\2\2\2!\u00d5\3\2\2\2#\u00d8\3\2\2"+
		"\2%\u00db\3\2\2\2\'\u00de\3\2\2\2)\u00e1\3\2\2\2+\u00e3\3\2\2\2-\u00e5"+
		"\3\2\2\2/\u00e7\3\2\2\2\61\u00e9\3\2\2\2\63\u00eb\3\2\2\2\65\u00ed\3\2"+
		"\2\2\67\u00ef\3\2\2\29\u00f1\3\2\2\2;\u00f3\3\2\2\2=\u00f5\3\2\2\2?\u00f7"+
		"\3\2\2\2A\u00f9\3\2\2\2C\u00fb\3\2\2\2E\u00fd\3\2\2\2G\u00ff\3\2\2\2I"+
		"\u0101\3\2\2\2K\u0103\3\2\2\2M\u0105\3\2\2\2O\u0107\3\2\2\2Q\u0109\3\2"+
		"\2\2S\u0118\3\2\2\2U\u011e\3\2\2\2W\u0128\3\2\2\2Y\u012c\3\2\2\2[\u0135"+
		"\3\2\2\2]\u013e\3\2\2\2_\u0140\3\2\2\2a\u0142\3\2\2\2c\u0144\3\2\2\2e"+
		"\u0146\3\2\2\2g\u0148\3\2\2\2i\u014a\3\2\2\2k\u014c\3\2\2\2m\u014e\3\2"+
		"\2\2o\u0150\3\2\2\2q\u0152\3\2\2\2s\u0154\3\2\2\2u\u0156\3\2\2\2w\u0158"+
		"\3\2\2\2y\u015a\3\2\2\2{\u015c\3\2\2\2}\u015e\3\2\2\2\177\u0160\3\2\2"+
		"\2\u0081\u0162\3\2\2\2\u0083\u0164\3\2\2\2\u0085\u0166\3\2\2\2\u0087\u0168"+
		"\3\2\2\2\u0089\u016a\3\2\2\2\u008b\u016c\3\2\2\2\u008d\u016e\3\2\2\2\u008f"+
		"\u0170\3\2\2\2\u0091\u0172\3\2\2\2\u0093\u0174\3\2\2\2\u0095\u0176\3\2"+
		"\2\2\u0097\u0178\3\2\2\2\u0099\u009a\5u;\2\u009a\u009b\5\177@\2\u009b"+
		"\u009c\5\u008bF\2\u009c\4\3\2\2\2\u009d\u009e\5g\64\2\u009e\u009f\5\u0081"+
		"A\2\u009f\u00a0\5\u0081A\2\u00a0\u00a1\5{>\2\u00a1\6\3\2\2\2\u00a2\u00a3"+
		"\5m\67\2\u00a3\u00a4\5\177@\2\u00a4\u00a5\5\u008dG\2\u00a5\u00a6\5}?\2"+
		"\u00a6\b\3\2\2\2\u00a7\u00a8\5u;\2\u00a8\u00a9\5o8\2\u00a9\n\3\2\2\2\u00aa"+
		"\u00ab\5m\67\2\u00ab\u00ac\5{>\2\u00ac\u00ad\5\u0089E\2\u00ad\u00ae\5"+
		"m\67\2\u00ae\f\3\2\2\2\u00af\u00b0\5\u0091I\2\u00b0\u00b1\5s:\2\u00b1"+
		"\u00b2\5u;\2\u00b2\u00b3\5{>\2\u00b3\u00b4\5m\67\2\u00b4\16\3\2\2\2\u00b5"+
		"\u00b6\5\u0087D\2\u00b6\u00b7\5\u008dG\2\u00b7\u00b8\5\177@\2\u00b8\20"+
		"\3\2\2\2\u00b9\u00ba\5w<\2\u00ba\u00bb\5\u0081A\2\u00bb\u00bc\5u;\2\u00bc"+
		"\u00bd\5\177@\2\u00bd\22\3\2\2\2\u00be\u00bf\5\u008bF\2\u00bf\u00c0\5"+
		"\u0087D\2\u00c0\u00c1\5\u008dG\2\u00c1\u00c2\5m\67\2\u00c2\24\3\2\2\2"+
		"\u00c3\u00c4\5o8\2\u00c4\u00c5\5e\63\2\u00c5\u00c6\5{>\2\u00c6\u00c7\5"+
		"\u0089E\2\u00c7\u00c8\5m\67\2\u00c8\26\3\2\2\2\u00c9\u00ca\7?\2\2\u00ca"+
		"\30\3\2\2\2\u00cb\u00cc\7?\2\2\u00cc\u00cd\7?\2\2\u00cd\32\3\2\2\2\u00ce"+
		"\u00cf\7@\2\2\u00cf\34\3\2\2\2\u00d0\u00d1\7@\2\2\u00d1\u00d2\7?\2\2\u00d2"+
		"\36\3\2\2\2\u00d3\u00d4\7>\2\2\u00d4 \3\2\2\2\u00d5\u00d6\7>\2\2\u00d6"+
		"\u00d7\7?\2\2\u00d7\"\3\2\2\2\u00d8\u00d9\7#\2\2\u00d9\u00da\7?\2\2\u00da"+
		"$\3\2\2\2\u00db\u00dc\7(\2\2\u00dc\u00dd\7(\2\2\u00dd&\3\2\2\2\u00de\u00df"+
		"\7~\2\2\u00df\u00e0\7~\2\2\u00e0(\3\2\2\2\u00e1\u00e2\7#\2\2\u00e2*\3"+
		"\2\2\2\u00e3\u00e4\7}\2\2\u00e4,\3\2\2\2\u00e5\u00e6\7\177\2\2\u00e6."+
		"\3\2\2\2\u00e7\u00e8\7*\2\2\u00e8\60\3\2\2\2\u00e9\u00ea\7+\2\2\u00ea"+
		"\62\3\2\2\2\u00eb\u00ec\7]\2\2\u00ec\64\3\2\2\2\u00ed\u00ee\7_\2\2\u00ee"+
		"\66\3\2\2\2\u00ef\u00f0\7=\2\2\u00f08\3\2\2\2\u00f1\u00f2\7$\2\2\u00f2"+
		":\3\2\2\2\u00f3\u00f4\7)\2\2\u00f4<\3\2\2\2\u00f5\u00f6\7<\2\2\u00f6>"+
		"\3\2\2\2\u00f7\u00f8\7.\2\2\u00f8@\3\2\2\2\u00f9\u00fa\7\60\2\2\u00fa"+
		"B\3\2\2\2\u00fb\u00fc\7(\2\2\u00fcD\3\2\2\2\u00fd\u00fe\7-\2\2\u00feF"+
		"\3\2\2\2\u00ff\u0100\7/\2\2\u0100H\3\2\2\2\u0101\u0102\7\61\2\2\u0102"+
		"J\3\2\2\2\u0103\u0104\7,\2\2\u0104L\3\2\2\2\u0105\u0106\7`\2\2\u0106N"+
		"\3\2\2\2\u0107\u0108\7a\2\2\u0108P\3\2\2\2\u0109\u010a\7\61\2\2\u010a"+
		"\u010b\7,\2\2\u010b\u010f\3\2\2\2\u010c\u010e\13\2\2\2\u010d\u010c\3\2"+
		"\2\2\u010e\u0111\3\2\2\2\u010f\u0110\3\2\2\2\u010f\u010d\3\2\2\2\u0110"+
		"\u0112\3\2\2\2\u0111\u010f\3\2\2\2\u0112\u0113\7,\2\2\u0113\u0114\7\61"+
		"\2\2\u0114\u0115\3\2\2\2\u0115\u0116\b)\2\2\u0116R\3\2\2\2\u0117\u0119"+
		"\t\2\2\2\u0118\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u0118\3\2\2\2\u011a"+
		"\u011b\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d\b*\2\2\u011dT\3\2\2\2\u011e"+
		"\u0124\5a\61\2\u011f\u0123\5]/\2\u0120\u0123\5O(\2\u0121\u0123\5c\62\2"+
		"\u0122\u011f\3\2\2\2\u0122\u0120\3\2\2\2\u0122\u0121\3\2\2\2\u0123\u0126"+
		"\3\2\2\2\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125V\3\2\2\2\u0126"+
		"\u0124\3\2\2\2\u0127\u0129\5c\62\2\u0128\u0127\3\2\2\2\u0129\u012a\3\2"+
		"\2\2\u012a\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012bX\3\2\2\2\u012c\u0132"+
		"\5_\60\2\u012d\u0131\5_\60\2\u012e\u0131\5O(\2\u012f\u0131\5c\62\2\u0130"+
		"\u012d\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u012f\3\2\2\2\u0131\u0134\3\2"+
		"\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133Z\3\2\2\2\u0134\u0132"+
		"\3\2\2\2\u0135\u0139\59\35\2\u0136\u0138\13\2\2\2\u0137\u0136\3\2\2\2"+
		"\u0138\u013b\3\2\2\2\u0139\u013a\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u013c"+
		"\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u013d\59\35\2\u013d\\\3\2\2\2\u013e"+
		"\u013f\t\3\2\2\u013f^\3\2\2\2\u0140\u0141\t\4\2\2\u0141`\3\2\2\2\u0142"+
		"\u0143\t\5\2\2\u0143b\3\2\2\2\u0144\u0145\t\6\2\2\u0145d\3\2\2\2\u0146"+
		"\u0147\t\7\2\2\u0147f\3\2\2\2\u0148\u0149\t\b\2\2\u0149h\3\2\2\2\u014a"+
		"\u014b\t\t\2\2\u014bj\3\2\2\2\u014c\u014d\t\n\2\2\u014dl\3\2\2\2\u014e"+
		"\u014f\t\13\2\2\u014fn\3\2\2\2\u0150\u0151\t\f\2\2\u0151p\3\2\2\2\u0152"+
		"\u0153\t\r\2\2\u0153r\3\2\2\2\u0154\u0155\t\16\2\2\u0155t\3\2\2\2\u0156"+
		"\u0157\t\17\2\2\u0157v\3\2\2\2\u0158\u0159\t\20\2\2\u0159x\3\2\2\2\u015a"+
		"\u015b\t\21\2\2\u015bz\3\2\2\2\u015c\u015d\t\22\2\2\u015d|\3\2\2\2\u015e"+
		"\u015f\t\23\2\2\u015f~\3\2\2\2\u0160\u0161\t\24\2\2\u0161\u0080\3\2\2"+
		"\2\u0162\u0163\t\25\2\2\u0163\u0082\3\2\2\2\u0164\u0165\t\26\2\2\u0165"+
		"\u0084\3\2\2\2\u0166\u0167\t\27\2\2\u0167\u0086\3\2\2\2\u0168\u0169\t"+
		"\30\2\2\u0169\u0088\3\2\2\2\u016a\u016b\t\31\2\2\u016b\u008a\3\2\2\2\u016c"+
		"\u016d\t\32\2\2\u016d\u008c\3\2\2\2\u016e\u016f\t\33\2\2\u016f\u008e\3"+
		"\2\2\2\u0170\u0171\t\34\2\2\u0171\u0090\3\2\2\2\u0172\u0173\t\35\2\2\u0173"+
		"\u0092\3\2\2\2\u0174\u0175\t\36\2\2\u0175\u0094\3\2\2\2\u0176\u0177\t"+
		"\37\2\2\u0177\u0096\3\2\2\2\u0178\u0179\t \2\2\u0179\u0098\3\2\2\2\13"+
		"\2\u010f\u011a\u0122\u0124\u012a\u0130\u0132\u0139\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}